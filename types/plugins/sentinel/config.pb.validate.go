// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/plugins/sentinel/config.proto

package sentinel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	switch v := m.Rule.(type) {
	case *Config_Flow:
		if v == nil {
			err := ConfigValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Flow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Flow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Flow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_HotSpot:
		if v == nil {
			err := ConfigValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHotSpot()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "HotSpot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "HotSpot",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHotSpot()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "HotSpot",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_Isolation:
		if v == nil {
			err := ConfigValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIsolation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Isolation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Isolation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIsolation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Isolation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_CircuitBreaker:
		if v == nil {
			err := ConfigValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCircuitBreaker()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "CircuitBreaker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "CircuitBreaker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCircuitBreaker()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "CircuitBreaker",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Config_System:
		if v == nil {
			err := ConfigValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSystem()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "System",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "System",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Key with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Key with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KeyMultiError, or nil if none found.
func (m *Key) ValidateAll() error {
	return m.validate(true)
}

func (m *Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := KeyValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Source

	if len(errors) > 0 {
		return KeyMultiError(errors)
	}

	return nil
}

// KeyMultiError is an error wrapping multiple validation errors returned by
// Key.ValidateAll() if the designated constraints aren't met.
type KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyMultiError) AllErrors() []error { return m }

// KeyValidationError is the validation error returned by Key.Validate if the
// designated constraints aren't met.
type KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValidationError) ErrorName() string { return "KeyValidationError" }

// Error satisfies the builtin error interface
func (e KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValidationError{}

// Validate checks the field values on FlowRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlowRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlowRuleMultiError, or nil
// if none found.
func (m *FlowRule) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Resource

	// no validation rules for TokenCalculateStrategy

	// no validation rules for ControlBehavior

	// no validation rules for Threshold

	// no validation rules for RelationStrategy

	// no validation rules for RefResource

	// no validation rules for MaxQueueingTimeMs

	// no validation rules for WarmUpPeriodSec

	// no validation rules for WarmUpColdFactor

	// no validation rules for StatIntervalInMs

	// no validation rules for LowMemUsageThreshold

	// no validation rules for HighMemUsageThreshold

	// no validation rules for MemLowWaterMarkBytes

	// no validation rules for MemHighWaterMarkBytes

	if len(errors) > 0 {
		return FlowRuleMultiError(errors)
	}

	return nil
}

// FlowRuleMultiError is an error wrapping multiple validation errors returned
// by FlowRule.ValidateAll() if the designated constraints aren't met.
type FlowRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRuleMultiError) AllErrors() []error { return m }

// FlowRuleValidationError is the validation error returned by
// FlowRule.Validate if the designated constraints aren't met.
type FlowRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRuleValidationError) ErrorName() string { return "FlowRuleValidationError" }

// Error satisfies the builtin error interface
func (e FlowRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRuleValidationError{}

// Validate checks the field values on HotSpotRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HotSpotRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HotSpotRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HotSpotRuleMultiError, or
// nil if none found.
func (m *HotSpotRule) ValidateAll() error {
	return m.validate(true)
}

func (m *HotSpotRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Resource

	// no validation rules for MetricType

	// no validation rules for ControlBehavior

	// no validation rules for ParamIndex

	// no validation rules for ParamKey

	// no validation rules for Threshold

	// no validation rules for MaxQueueingTimeMs

	// no validation rules for BurstCount

	// no validation rules for DurationInSec

	// no validation rules for ParamsMaxCapacity

	// no validation rules for SpecificItems

	if len(errors) > 0 {
		return HotSpotRuleMultiError(errors)
	}

	return nil
}

// HotSpotRuleMultiError is an error wrapping multiple validation errors
// returned by HotSpotRule.ValidateAll() if the designated constraints aren't met.
type HotSpotRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HotSpotRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HotSpotRuleMultiError) AllErrors() []error { return m }

// HotSpotRuleValidationError is the validation error returned by
// HotSpotRule.Validate if the designated constraints aren't met.
type HotSpotRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HotSpotRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HotSpotRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HotSpotRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HotSpotRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HotSpotRuleValidationError) ErrorName() string { return "HotSpotRuleValidationError" }

// Error satisfies the builtin error interface
func (e HotSpotRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHotSpotRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HotSpotRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HotSpotRuleValidationError{}

// Validate checks the field values on IsolationRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsolationRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsolationRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsolationRuleMultiError, or
// nil if none found.
func (m *IsolationRule) ValidateAll() error {
	return m.validate(true)
}

func (m *IsolationRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Resource

	// no validation rules for Concurrency

	if len(errors) > 0 {
		return IsolationRuleMultiError(errors)
	}

	return nil
}

// IsolationRuleMultiError is an error wrapping multiple validation errors
// returned by IsolationRule.ValidateAll() if the designated constraints
// aren't met.
type IsolationRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsolationRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsolationRuleMultiError) AllErrors() []error { return m }

// IsolationRuleValidationError is the validation error returned by
// IsolationRule.Validate if the designated constraints aren't met.
type IsolationRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsolationRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsolationRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsolationRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsolationRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsolationRuleValidationError) ErrorName() string { return "IsolationRuleValidationError" }

// Error satisfies the builtin error interface
func (e IsolationRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsolationRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsolationRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsolationRuleValidationError{}

// Validate checks the field values on CircuitBreakerRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CircuitBreakerRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CircuitBreakerRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CircuitBreakerRuleMultiError, or nil if none found.
func (m *CircuitBreakerRule) ValidateAll() error {
	return m.validate(true)
}

func (m *CircuitBreakerRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Resource

	// no validation rules for Strategy

	// no validation rules for RetryTimeoutMs

	// no validation rules for MinRequestAmount

	// no validation rules for StatIntervalMs

	// no validation rules for StatSlidingWindowBucketCount

	// no validation rules for MaxAllowedRtMs

	// no validation rules for Threshold

	// no validation rules for ProbeNum

	if len(errors) > 0 {
		return CircuitBreakerRuleMultiError(errors)
	}

	return nil
}

// CircuitBreakerRuleMultiError is an error wrapping multiple validation errors
// returned by CircuitBreakerRule.ValidateAll() if the designated constraints
// aren't met.
type CircuitBreakerRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CircuitBreakerRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CircuitBreakerRuleMultiError) AllErrors() []error { return m }

// CircuitBreakerRuleValidationError is the validation error returned by
// CircuitBreakerRule.Validate if the designated constraints aren't met.
type CircuitBreakerRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CircuitBreakerRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CircuitBreakerRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CircuitBreakerRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CircuitBreakerRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CircuitBreakerRuleValidationError) ErrorName() string {
	return "CircuitBreakerRuleValidationError"
}

// Error satisfies the builtin error interface
func (e CircuitBreakerRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCircuitBreakerRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CircuitBreakerRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CircuitBreakerRuleValidationError{}

// Validate checks the field values on SystemRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemRuleMultiError, or
// nil if none found.
func (m *SystemRule) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MetricType

	// no validation rules for TriggerCount

	// no validation rules for Strategy

	if len(errors) > 0 {
		return SystemRuleMultiError(errors)
	}

	return nil
}

// SystemRuleMultiError is an error wrapping multiple validation errors
// returned by SystemRule.ValidateAll() if the designated constraints aren't met.
type SystemRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemRuleMultiError) AllErrors() []error { return m }

// SystemRuleValidationError is the validation error returned by
// SystemRule.Validate if the designated constraints aren't met.
type SystemRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemRuleValidationError) ErrorName() string { return "SystemRuleValidationError" }

// Error satisfies the builtin error interface
func (e SystemRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemRuleValidationError{}
